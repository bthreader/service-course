plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'com.netflix.dgs.codegen' version "6.0.3"
    id "io.freefair.lombok" version "8.4"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'junit:junit:4.13.1'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:latest.release"))
    implementation "com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.netflix.graphql.dgs:graphql-dgs-extended-scalars'
    testImplementation "org.mockito:mockito-core:3.+"
    implementation 'com.graphql-java:graphql-java:21.2'
}

generateJava {
    schemaPaths = ["${projectDir}/src/main/resources/schema"] // List of directories containing schema files
    packageName = 'servicecourse.generated' // The package name to use to generate sources
    generateClient = true // Enable generating the type safe query API
    typeMapping = [
            "Url": "java.net.URL",
    ]
}

tasks.named('test') {
    useJUnitPlatform()
}
