# Scalars

scalar Url
@specifiedBy(url:
"https://www.w3.org/Addressing/URL/url-spec.txt"
)

"""
YYYY-MM-DD
"""
scalar Date
@specifiedBy(url:
"https://tools.ietf.org/html/rfc3339"
)

"""
An integer that must be greater than zero
"""
scalar PositiveInt

# Utils

enum Operator {
    OR
    AND
}

input DateRangeFilterInput {
    from: Date!
    to: Date!
}

"""
If multiple fields are specified, they will be combined with OR logic. If no fields are specified,
the filter will be treated as "match all".
"""
input StringFilterInput {
    """
    Case in-sensitive match
    """
    contains: String
    in: [String!]
    equals: String
}

"""
If multiple fields are specified, they will be combined with OR logic. If no fields are specified,
the filter will be treated as "match all".
"""
input IntegerFilterInput {
    equals: Int
    in: [Int!]
}

input CursorInput {
    cursor: String
}

type Cursor {
    cursor: String
}

"""
Page object to support pagination
"""
type PageInfo {
    """
    Is there a previous page for the direction we're paging in?

    I.e. if paging using `after`, is there a page before?
    """
    hasPreviousPage: Boolean!
    """
    Is there a next page for the direction we're paging in?

    I.e. if paging using `after`, is there another page after?
    """
    hasNextPage: Boolean!
    """
    Null if no data
    """
    startCursor: Cursor
    """
    Null if no data
    """
    endCursor: Cursor
}

# Queries and mutations

type Query {
    bikes(
        filter: BikesFilterInput,
        """
        The number of results to return.
        - Must be greater than zero
        - The maximum value is 100, values higher than this will be truncated
        - If not specified, will default to 10
        """
        first: PositiveInt = 10,
        """
        If specified, only return results after the cursor
        """
        after: CursorInput): BikeConnection!
    """
    All bike brands
    """
    bikeBrands: [BikeBrand!]!
    #    """
    #    Get the available days to book for a give bike for a given date range.
    #
    #    If no date range is specified, the default will be today -> last day of the current month
    #    """
    # availableDays(
    #    bikeId: ID!,
    #    dateRangeFilterInput: DateRangeFilterInput): [Date!]
}

type Mutation {
    createBike(input: CreateBikeInput!): Bike
    updateBike(input: UpdateBikeInput!): Bike
    """
    - @return the name of the successfully deleted bike
    """
    deleteBike(id: ID!): ID

    createModel(input: CreateModelInput!): Model
    """
    - @return the ID of the successfully deleted model
    """
    deleteModel(id: ID!): ID

    createBikeBrand(input: CreateBikeBrandInput!): BikeBrand
    """
    - @return the name of the successfully deleted bike brand
    """
    deleteBikeBrand(name: String!): String

    createGroupset(input: CreateGroupsetInput!): Groupset
    """
    - @return the name of the successfully deleted groupset
    """
    deleteGroupset(name: String!): String
}

# Bike brands

type BikeBrand {
    name: String!
    models: [Model!]
}

input CreateBikeBrandInput {
    name: String!
}

# Models

type Model {
    id: ID!
    name: String!
    modelYear: Int!
    brand: BikeBrand!
}

input CreateModelInput {
    name: String!
    modelYear: Int!
    brandName: String!
}

"""
If multiple fields are specified, they will be combined with AND logic. If no fields are
specified, the filter will be treated as "match all".
"""
input ModelFilterInput {
    """
    If specified, return only models with a name that matches the string filter
    """
    name: StringFilterInput
    """
    If specified, return only models with a model year that matches the integer filter
    """
    modelYear: IntegerFilterInput
    """
    If specified, return only models with a brand name that matches the string filter
    """
    brandName: StringFilterInput
}

# Bikes

type Bike {
    id: ID!
    model: Model!
    size: String!
    groupset: Groupset!
    heroImageUrl: Url
}

type BikeConnection {
    edges: [BikeConnectionEdge!]!
    """
    TODO can we guarantee non-null here?
    """
    pageInfo: PageInfo
}

type BikeConnectionEdge {
    node: Bike!
    cursor: String!
}

"""
If multiple fields are specified, they will be combined with AND logic. If no fields are
specified, the filter will be treated as "match all".
"""
input BikesFilterInput {
    """
    If specified, return only bikes that are available in the provided date range
    """
    availableDateRange: DateRangeFilterInput
    """
    If specified, return only bikes whose model matches the criteria
    """
    model: ModelFilterInput
    """
    If specified, return only bikes with a groupset matching the criteria
    """
    groupset: GroupsetFilterInput
    """
    If specified, return only bikes with a size that matches the string filter
    """
    size: StringFilterInput
}

input CreateBikeInput {
    """
    The ID of the model of the bike, a model with this id must exist otherwise the mutation will
    fail and an error will be raised
    """
    modelId: ID!
    """
    The name of the groupset of the bike, a groupset with this name must exist otherwise the
    mutation will fail and an error will be raised
    """
    groupsetName: String!
    size: String!
    heroImageUrl: Url
}

input UpdateBikeInput {
    bikeId: ID!
    """
    If specified, there must be a groupset with this name already saved otherwise the mutation will
    fail and an error will be raised
    """
    groupsetName: String
    heroImageUrl: Url
}

# Equipment

enum GroupsetBrand {
    SRAM
    SHIMANO
    CAMPAGNOLO
}

type Groupset {
    name: String!
    brand: GroupsetBrand!
    isElectronic: Boolean!
}

"""
If multiple fields are specified, they will be combined with AND logic. If no fields are
specified, the filter will be treated as "match all".
"""
input GroupsetFilterInput {
    """
    If specified, return only groupsets with a name that matches the string filter
    """
    name: StringFilterInput
    """
    If specified, return only groupsets that belong to the provided brand
    """
    brand: GroupsetBrand
    isElectronic: Boolean
}

input CreateGroupsetInput {
    name: String!
    brand: GroupsetBrand!
    isElectronic: Boolean!
}
