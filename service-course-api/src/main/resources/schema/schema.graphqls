# Scalars

scalar Url
@specifiedBy(url:
"https://www.w3.org/Addressing/URL/url-spec.txt"
)

"""
YYYY-MM-DD
"""
scalar Date
@specifiedBy(url:
"https://tools.ietf.org/html/rfc3339"
)

# Utils

enum Op {
    OR
    AND
}

input DateRangeFilterInput {
    from: Date!
    to: Date!
}

"""
Fields are combined with OR logic.

Must specify a minimum of one field, otherwise an error will be raised.
"""
input StringFilterInput {
    """
    Case in-sensitive match
    """
    contains: String
    in: [String!]
    equals: String
}

input IntegerFilterInput {
    lessThanOrEqualTo: Int
    greaterThanOrEqualTo: Int
    equals: Int
    in: [Int!]
    operator: Op
}

# Queries and mutations

type Query {
    bikes(filter: BikesFilterInput): [Bike!]!
    """
    All bike brands
    """
    bikeBrands: [BikeBrand!]!
    #    """
    #    Get the available days to book for a give bike for a given date range.
    #
    #    If no date range is specified, the default will be today -> last day of the current month
    #    """
    # availableDays(
    #    bikeId: ID!,
    #    dateRangeFilterInput: DateRangeFilterInput): [Date!]
}

type Mutation {
    createBike(input: CreateBikeInput!): Bike
    updateBike(input: UpdateBikeInput!): Bike
    deleteBike(id: ID!): ID

    createModel(input: CreateModelInput!): Model
    deleteModel(id: ID!): ID

    createBikeBrand(input: CreateBikeBrandInput!): BikeBrand
    deleteBikeBrand(name: String!): String
}

# Bike brands

type BikeBrand {
    name: String!
    models: [Model!]
}

input CreateBikeBrandInput {
    name: String!
}

# Models

type Model {
    id: ID!
    name: String!
    modelYear: Int!
    brand: BikeBrand!
}

input CreateModelInput {
    name: String!
    modelYear: Int!
    brandName: String!
}

"""
Fields are combined with AND logic
"""
input ModelFilterInput {
    name: StringFilterInput
    modelYear: IntegerFilterInput
    brandName: String
}

# Bikes

type Bike {
    id: ID!
    model: Model!
    size: String!
    groupset: Groupset!
    heroImageUrl: Url
}

input BikesFilterInput {
    """
    Return only bikes that are available in the provided date range
    """
    availableDateRange: DateRangeFilterInput
    """
    Return only bikes whose model matches the criteria
    """
    model: ModelFilterInput
    """
    Return only bikes with a groupset matching the criteria
    """
    groupset: GroupsetFilterInput
    """
    Return only bikes with a size that matches the input
    """
    size: StringFilterInput
}

input CreateBikeInput {
    modelId: ID!
    """
    There must be a groupset with this name already saved otherwise the mutation will fail and an
    error will be raised.
    """
    groupsetName: String!
    size: String!
    heroImageUrl: Url
}

input UpdateBikeInput {
    bikeId: ID!
    """
    If specified, there must be a groupset with this name already saved otherwise the mutation will
    fail and an error will be raised.
    """
    groupsetName: String
    heroImageUrl: Url
}

# Equipment

enum GroupsetBrand {
    SRAM
    SHIMANO
    CAMPAGNOLO
}

type Groupset {
    name: String!
    brand: GroupsetBrand!
    isElectronic: Boolean!
}

input GroupsetFilterInput {
    """
    Return only groupsets with a name that matches the input
    """
    name: StringFilterInput
    brand: GroupsetBrand
    isElectronic: Boolean
}
